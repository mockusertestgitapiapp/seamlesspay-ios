SPPaymentCardTextField

@interface SPPaymentCardTextField : UIControl <UIKeyInput>
SPPaymentCardTextField is a text field with similar properties to UITextField, but specialized for collecting credit/debit card information. It manages multiple UITextFields under the hood to collect this information. It’s designed to fit on a single line, and from a design perspective can be used anywhere a UITextField would be appropriate.

------------------------------------------------

delegate
SEE
SPPaymentCardTextFieldDelegate
Declaration

OBJECTIVE-C
@property (readwrite, nonatomic, nullable) id<SPPaymentCardTextFieldDelegate>
    delegate;
SWIFT
@IBOutlet weak var delegate: SPPaymentCardTextFieldDelegate? { get set }
-------------------------------------------------
font
The font used in each child field. Default is [UIFont systemFontOfSize:18].

Set this property to nil to reset to the default.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, null_resettable) UIFont *font;
SWIFT
@NSCopying var font: UIFont! { get set }
-------------------------------------------------
textColor
The text color to be used when entering valid text. Default is [UIColor labelColor].

Set this property to nil to reset to the default.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, null_resettable) UIColor *textColor;
SWIFT
@NSCopying var textColor: UIColor! { get set }
-------------------------------------------------
textErrorColor
The text color to be used when the user has entered invalid information, such as an invalid card number.

Default is [UIColor redColor]. Set this property to nil to reset to the default.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, null_resettable) UIColor *textErrorColor;
SWIFT
@NSCopying var textErrorColor: UIColor! { get set }
-------------------------------------------------
placeholderColor
The text placeholder color used in each child field.

This will also set the color of the card placeholder icon.

Default is [UIColor systemGray2Color]. Set this property to nil to reset to the default.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, null_resettable)
    UIColor *placeholderColor;
SWIFT
@NSCopying var placeholderColor: UIColor! { get set }
-------------------------------------------------
numberPlaceholder
The placeholder for the card number field.

Default is @“----------------”.

If this is set to something that resembles a card number, it will automatically format it as such (in other words, you don’t need to add spaces to this string).

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) NSString *numberPlaceholder;
SWIFT
var numberPlaceholder: String? { get set }
-------------------------------------------------
expirationPlaceholder
The placeholder for the expiration field. Defaults to @“MM/YY”.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) NSString *expirationPlaceholder;
SWIFT
var expirationPlaceholder: String? { get set }
-------------------------------------------------
cvcPlaceholder
The placeholder for the cvc field. Defaults to @“CVC”.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) NSString *cvcPlaceholder;
SWIFT
var cvcPlaceholder: String? { get set }
-------------------------------------------------
postalCodePlaceholder
The placeholder for the postal code field. Defaults to @“ZIP” for United States or @“Postal” for all other country codes.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) NSString *postalCodePlaceholder;
SWIFT
var postalCodePlaceholder: String? { get set }
-------------------------------------------------
cursorColor
The cursor color for the field.

This is a proxy for the view’s tintColor property, exposed for clarity only (in other words, calling setCursorColor is identical to calling setTintColor).

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, null_resettable) UIColor *cursorColor;
SWIFT
@NSCopying var cursorColor: UIColor! { get set }
-------------------------------------------------
borderColor
The border color for the field.

Can be nil (in which case no border will be drawn).

Default is [UIColor systemGray2Color].

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) UIColor *borderColor;
SWIFT
@NSCopying var borderColor: UIColor? { get set }
-------------------------------------------------
borderWidth
The width of the field’s border.

Default is 1.0.

Declaration

OBJECTIVE-C
@property (assign, readwrite, nonatomic) CGFloat borderWidth;
SWIFT
var borderWidth: CGFloat { get set }
-------------------------------------------------
cornerRadius
The corner radius for the field’s border.

Default is 5.0.

Declaration

OBJECTIVE-C
@property (assign, readwrite, nonatomic) CGFloat cornerRadius;
SWIFT
var cornerRadius: CGFloat { get set }
-------------------------------------------------
keyboardAppearance
The keyboard appearance for the field.

Default is UIKeyboardAppearanceDefault.

Declaration

OBJECTIVE-C
@property (assign, readwrite, nonatomic) UIKeyboardAppearance keyboardAppearance;
SWIFT
var keyboardAppearance: UIKeyboardAppearance { get set }
-------------------------------------------------
inputView
This behaves identically to setting the inputView for each child text field.

Declaration

OBJECTIVE-C
@property (readwrite, strong, nonatomic, nullable) UIView *inputView;
SWIFT
var inputView: UIView? { get set }
-------------------------------------------------
inputAccessoryView
This behaves identically to setting the inputAccessoryView for each child text field.

Declaration

OBJECTIVE-C
@property (readwrite, strong, nonatomic, nullable) UIView *inputAccessoryView;
SWIFT
var inputAccessoryView: UIView? { get set }
-------------------------------------------------
brandImage
The curent brand image displayed in the receiver.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) UIImage *brandImage;
SWIFT
var brandImage: UIImage? { get }
-------------------------------------------------
isValid
Whether or not the form currently contains a valid card number, expiration date, CVC, and postal code (if required).

SEE
SPCardValidator
Declaration

OBJECTIVE-C
@property (readonly, nonatomic) BOOL isValid;
SWIFT
var isValid: Bool { get }
-------------------------------------------------
enabled
Enable/disable selecting or editing the field. Useful when submitting card details to Stripe.

Declaration

OBJECTIVE-C
@property (getter=isEnabled, assign, readwrite, nonatomic) BOOL enabled;
SWIFT
var isEnabled: Bool { get set }
-------------------------------------------------
cardNumber
The current card number displayed by the field.

May or may not be valid, unless isValid is true, in which case it is guaranteed to be valid.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) NSString *cardNumber;
SWIFT
var cardNumber: String? { get }
-------------------------------------------------
expirationMonth
The current expiration month displayed by the field (1 = January, etc).

May or may not be valid, unless isValid is true, in which case it is guaranteed to be valid.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic) NSUInteger expirationMonth;
SWIFT
var expirationMonth: UInt { get }
-------------------------------------------------
formattedExpirationMonth
The current expiration month displayed by the field, as a string. T

This may or may not be a valid entry (i.e. “0”) unless isValid is true. It may be also 0-prefixed (i.e. “01” for January).

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) NSString *formattedExpirationMonth;
SWIFT
var formattedExpirationMonth: String? { get }
-------------------------------------------------
expirationYear
The current expiration year displayed by the field, modulo 100 (e.g. the year 2015 will be represented as 15).

May or may not be valid, unless isValid is true, in which case it is guaranteed to be valid.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic) NSUInteger expirationYear;
SWIFT
var expirationYear: UInt { get }
-------------------------------------------------
formattedExpirationYear
The current expiration year displayed by the field, as a string.

This is a 2-digit year (i.e. “15”), and may or may not be a valid entry unless isValid is true.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) NSString *formattedExpirationYear;
SWIFT
var formattedExpirationYear: String? { get }
-------------------------------------------------
cvc
The current card CVC displayed by the field.

May or may not be valid, unless isValid is true, in which case it is guaranteed to be valid.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) NSString *cvc;
SWIFT
var cvc: String? { get }
-------------------------------------------------
postalCode
The current card ZIP or postal code displayed by the field.

Declaration

OBJECTIVE-C
@property (readonly, nonatomic, nullable) NSString *postalCode;
SWIFT
var postalCode: String? { get }
-------------------------------------------------
postalCodeEntryEnabled
Controls if a postal code entry field can be displayed to the user.

Default is YES.

If YES, the type of code entry shown is controlled by the set countryCode value. Some country codes may result in no postal code entry being shown if those countries do not commonly use postal codes.

If NO, no postal code entry will ever be displayed.

Declaration

OBJECTIVE-C
@property (assign, readwrite, nonatomic) BOOL postalCodeEntryEnabled;
SWIFT
var postalCodeEntryEnabled: Bool { get set }
-------------------------------------------------
countryCode
The two-letter ISO country code that corresponds to the user’s billing address.

If postalCodeEntryEnabled is YES, this controls which type of entry is allowed. If postalCodeEntryEnabled is NO, this property currently has no effect.

If set to nil and postal code entry is enabled, the country from the user’s current locale will be filled in. Otherwise the specific country code set will be used.

By default this will fetch the user’s current country code from NSLocale.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nullable) NSString *countryCode;
SWIFT
var countryCode: String? { get set }
-------------------------------------------------
cardParams
Convenience property for creating an SPPaymentMethodCardParams from the currently entered information or programmatically setting the field’s contents. For example, if you’re using another library to scan your user’s credit card with a camera, you can assemble that data into an SPPaymentMethodCardParams object and set this property to that object to prefill the fields you’ve collected.

Accessing this property returns a copied cardParams. The only way to change properties in this object is to make changes to a SPPaymentMethodCardParams you own (retrieved from this text field if desired), and then set this property to the new value.

Declaration

OBJECTIVE-C
@property (readwrite, copy, nonatomic, nonnull)
    SPPaymentMethodCardParams *cardParams;
SWIFT
@NSCopying var cardParams: SPPaymentMethodCardParams { get set }
-------------------------------------------------
-becomeFirstResponder
Causes the text field to begin editing. Presents the keyboard.

SEE
UIResponder
Declaration

OBJECTIVE-C
- (BOOL)becomeFirstResponder;
SWIFT
func becomeFirstResponder() -> Bool
Return Value

Whether or not the text field successfully began editing.

-------------------------------------------------
-resignFirstResponder
Causes the text field to stop editing. Dismisses the keyboard.

SEE
UIResponder
Declaration

OBJECTIVE-C
- (BOOL)resignFirstResponder;
SWIFT
func resignFirstResponder() -> Bool
Return Value

Whether or not the field successfully stopped editing.

-------------------------------------------------
-clear
Resets all of the contents of all of the fields. If the field is currently being edited, the number field will become selected.

Declaration

OBJECTIVE-C
- (void)clear;
SWIFT
func clear()
-------------------------------------------------
+cvcImageForCardBrand:
Returns the cvc image used for a card brand. Override this method in a subclass if you would like to provide custom images.

Declaration

OBJECTIVE-C
+ (nullable UIImage *)cvcImageForCardBrand:(SPCardBrand)cardBrand;
SWIFT
class func cvcImage(for cardBrand: SPCardBrand) -> UIImage?
Parameters

cardBrand	
The brand of card entered.
Return Value

The cvc image used for a card brand.

-------------------------------------------------
+brandImageForCardBrand:
Returns the brand image used for a card brand. Override this method in a subclass if you would like to provide custom images.

Declaration

OBJECTIVE-C

+ (nullable UIImage *)brandImageForCardBrand:(SPCardBrand)cardBrand;
SWIFT
class func brandImage(for cardBrand: SPCardBrand) -> UIImage?

Parameters

cardBrand	
The brand of card entered.
Return Value

The brand image used for a card brand.

-------------------------------------------------
+errorImageForCardBrand:
Returns the error image used for a card brand. Override this method in a subclass if you would like to provide custom images.

Declaration

OBJECTIVE-C
+ (nullable UIImage *)errorImageForCardBrand:(SPCardBrand)cardBrand;
SWIFT
class func errorImage(for cardBrand: SPCardBrand) -> UIImage?
Parameters

cardBrand	
The brand of card entered.
Return Value

The error image used for a card brand.

-------------------------------------------------
-brandImageRectForBounds:
Returns the rectangle in which the receiver draws its brand image.

Declaration

OBJECTIVE-C
- (CGRect)brandImageRectForBounds:(CGRect)bounds;
SWIFT
func brandImageRect(forBounds bounds: CGRect) -> CGRect
Parameters

bounds	
The bounding rectangle of the receiver.
Return Value

the rectangle in which the receiver draws its brand image.

-------------------------------------------------
-fieldsRectForBounds:
Returns the rectangle in which the receiver draws the text fields.

Declaration

OBJECTIVE-C
- (CGRect)fieldsRectForBounds:(CGRect)bounds;
SWIFT
func fieldsRect(forBounds bounds: CGRect) -> CGRect
Parameters

bounds	
The bounding rectangle of the receiver.
Return Value

The rectangle in which the receiver draws the text fields.

-------------------------------------------------